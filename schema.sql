
-- ----------------------------------------------------------------
--                          MESSAGING SCHEMA (v6 - Robust Drops)
-- ----------------------------------------------------------------

-- 1. DROP EXISTING OBJECTS (for clean re-runs during development)
--    - Order matters due to foreign key dependencies.
-- ----------------------------------------------------------------

-- Drop trigger if it exists (more robust check)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'on_new_message') THEN
        DROP TRIGGER on_new_message ON messages;
    END IF;
END
$$;

-- Drop function if it exists
DROP FUNCTION IF EXISTS update_conversation_on_new_message();

-- Drop tables (in reverse dependency order)
DROP TABLE IF EXISTS messages CASCADE;
DROP TABLE IF EXISTS conversations CASCADE;
DROP TABLE IF EXISTS patients CASCADE;
DROP TABLE IF EXISTS tenants CASCADE;

-- Drop ENUM types if they exist
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'message_type') THEN
        DROP TYPE message_type;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'message_status') THEN
        DROP TYPE message_status;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'message_sender') THEN
        DROP TYPE message_sender;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'platform_type') THEN
        DROP TYPE platform_type;
    END IF;
END
$$;


-- 2. ENUM TYPES
--    - Define custom types for message properties for data consistency.
-- ----------------------------------------------------------------
CREATE TYPE message_type AS ENUM ('text', 'audio', 'file');
CREATE TYPE message_status AS ENUM ('sent', 'delivered', 'read');
CREATE TYPE message_sender AS ENUM ('clinic', 'patient');
CREATE TYPE platform_type AS ENUM ('whatsapp', 'instagram', 'facebook', 'website');


-- 3. TENANTS TABLE
--    - Stores information about each client/clinic (tenant).
--    - Each tenant will have their own N8N webhook URL.
-- ----------------------------------------------------------------
CREATE TABLE tenants (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE, -- Name of the clinic/client
    n8n_webhook_url TEXT, -- Unique N8N webhook URL for this tenant
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

COMMENT ON TABLE "tenants" IS 'Stores information about each client/clinic (tenant) in the SaaS.';
COMMENT ON COLUMN "tenants"."n8n_webhook_url" IS 'The specific N8N webhook URL for this tenant''s automations.';


-- 4. PATIENTS TABLE
--    - Stores patient information, linked to a tenant.
--    - Designed with LGPD considerations for basic data and consent.
-- ----------------------------------------------------------------
CREATE TABLE patients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id BIGINT NOT NULL REFERENCES tenants(id) ON DELETE CASCADE, -- Link to the clinic/tenant
    name TEXT NOT NULL,
    email TEXT UNIQUE, -- Optional, but useful for contact
    phone TEXT UNIQUE, -- Optional, but useful for contact
    date_of_birth DATE, -- Optional
    consent_given BOOLEAN DEFAULT FALSE NOT NULL, -- LGPD: Explicit consent for data processing
    consent_at TIMESTAMPTZ, -- LGPD: Timestamp of when consent was given
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

COMMENT ON TABLE "patients" IS 'Stores patient information, linked to a specific tenant/clinic.';
COMMENT ON COLUMN "patients"."consent_given" IS 'LGPD: Indicates if the patient has given explicit consent for data processing.';
COMMENT ON COLUMN "patients"."consent_at" IS 'LGPD: Timestamp of when patient consent was given.';


-- 5. CONVERSATIONS TABLE
--    - Updated to link to tenants and patients.
-- ----------------------------------------------------------------
CREATE TABLE conversations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id BIGINT NOT NULL REFERENCES tenants(id) ON DELETE CASCADE, -- Link to the tenant
    patient_id BIGINT NOT NULL REFERENCES patients(id) ON DELETE CASCADE, -- Link to the patient
    patient_name TEXT NOT NULL, -- Denormalized for quick access in the UI (can be removed if always joined)
    patient_avatar_url TEXT,
    platform platform_type NOT NULL,
    n8n_workflow_enabled BOOLEAN DEFAULT TRUE NOT NULL,
    last_message_preview TEXT,
    last_message_at TIMESTAMPTZ DEFAULT NOW(),
    unread_count INT DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

COMMENT ON TABLE "conversations" IS 'Manages chat sessions, linking them to a tenant, patient, and platform.';
COMMENT ON COLUMN "conversations"."tenant_id" IS 'References the primary key of the tenants table.';
COMMENT ON COLUMN "conversations"."patient_id" IS 'References the primary key of the patients table.';


-- 6. MESSAGES TABLE
--    - No direct changes, but indirectly linked via conversation_id.
-- ----------------------------------------------------------------
CREATE TABLE messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    conversation_id BIGINT NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
    sender_type message_sender NOT NULL,
    content TEXT, -- For text messages or audio transcripts
    file_url TEXT, -- URL to Supabase Storage for audio or file attachments
    file_metadata JSONB, -- e.g., { "fileName": "report.pdf", "fileSize": "2MB" }
    type message_type DEFAULT 'text' NOT NULL,
    status message_status DEFAULT 'sent' NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

COMMENT ON TABLE "messages" IS 'Stores all messages for all conversations.';


-- 7. UPDATE CONVERSATION ON NEW MESSAGE TRIGGER
--    - Automatically updates the `conversations` table when a new message is inserted.
-- ----------------------------------------------------------------
CREATE OR REPLACE FUNCTION update_conversation_on_new_message()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE conversations
    SET
        last_message_preview = CASE
            WHEN NEW.type = 'text' THEN NEW.content
            WHEN NEW.type = 'audio' THEN 'Audio message'
            WHEN NEW.type = 'file' THEN 'File attachment'
            ELSE 'New message'
        END,
        last_message_at = NEW.created_at,
        unread_count = CASE
            WHEN NEW.sender_type = 'patient' THEN unread_count + 1
            ELSE unread_count
        END,
        updated_at = NOW()
    WHERE id = NEW.conversation_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_new_message
    AFTER INSERT ON messages
    FOR EACH ROW
    EXECUTE FUNCTION update_conversation_on_new_message();
